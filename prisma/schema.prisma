// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// generator zod {
//     provider = "zod-prisma"
//     output   = "./zod" // (default) the directory where generated zod schemas will be saved

//     relationModel = true // (default) Create and export both plain and related models.
//     // relationModel         = "default" // Do not export model without relations.
//     // relationModel         = false // Do not generate related model

//     modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//     // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//     modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

//     // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//     useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//     // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//     prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
//     // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

enum Status {
    PUBLISHED
    DRAFT
    INACTIVE
    SCHEDULED
}

type Image {
    url    String
    alt    String
    height Int
    width  Int
}

type Quantity {
    onSelf      Int
    inWareHouse Int
}

type Options {
    name   String
    values String
}

model Media {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    image Image[]
}

model MetaData {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    keywords    String

    categoryId String?   @db.ObjectId
    Category   Category? @relation(fields: [categoryId], references: [id])

    productId String?  @db.ObjectId
    Product   Product? @relation(fields: [productId], references: [id])

    variantId String?  @db.ObjectId
    Variant   Variant? @relation(fields: [variantId], references: [id])
}

model VariantOption {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    name   String
    values String

    productId String?  @db.ObjectId
    Product   Product? @relation(fields: [productId], references: [id])
}

model Variant {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    image       Image
    options     Options[]
    price       Int
    sku         String
    taxPercent  Int
    barcode     String
    height      Int
    width       Int
    length      Int
    weight      Int
    quantity    Quantity
    MetaData    MetaData[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    productId String  @db.ObjectId
    product   Product @relation(fields: [productId], references: [id])
}

model Product {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    image       Image
    description String
    tags        String
    taxPercent  Int
    status      Status   @default(DRAFT)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Variant        Variant[]
    option         VariantOption[]
    MetaData       MetaData[]
    CustomerReview CustomerReview[]

    categoryId String   @db.ObjectId
    Category   Category @relation(fields: [categoryId], references: [id])
}

model CustomerReview {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    email     String
    rating    Int
    comment   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId   String @db.ObjectId
    customer User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    productId String  @db.ObjectId
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    status      Status   @default(DRAFT)
    image       Image
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Product  Product[]
    MetaData MetaData[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?          @unique
    username       String?          @unique
    emailVerified  DateTime?
    role           Role             @default(ADMIN)
    image          String?
    accounts       Account[]
    sessions       Session[]
    CustomerReview CustomerReview[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
